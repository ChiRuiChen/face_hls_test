// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pooling2d_cl_ss_ap_fixed_ap_fixed_16_4_5_3_0_config8_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_V_dout,
        data_V_V_empty_n,
        data_V_V_read,
        res_V_V_din,
        res_V_V_full_n,
        res_V_V_write
);

parameter    ap_ST_fsm_state1 = 39'd1;
parameter    ap_ST_fsm_state2 = 39'd2;
parameter    ap_ST_fsm_state3 = 39'd4;
parameter    ap_ST_fsm_state4 = 39'd8;
parameter    ap_ST_fsm_state5 = 39'd16;
parameter    ap_ST_fsm_state6 = 39'd32;
parameter    ap_ST_fsm_state7 = 39'd64;
parameter    ap_ST_fsm_state8 = 39'd128;
parameter    ap_ST_fsm_state9 = 39'd256;
parameter    ap_ST_fsm_state10 = 39'd512;
parameter    ap_ST_fsm_state11 = 39'd1024;
parameter    ap_ST_fsm_state12 = 39'd2048;
parameter    ap_ST_fsm_state13 = 39'd4096;
parameter    ap_ST_fsm_state14 = 39'd8192;
parameter    ap_ST_fsm_state15 = 39'd16384;
parameter    ap_ST_fsm_state16 = 39'd32768;
parameter    ap_ST_fsm_state17 = 39'd65536;
parameter    ap_ST_fsm_state18 = 39'd131072;
parameter    ap_ST_fsm_state19 = 39'd262144;
parameter    ap_ST_fsm_state20 = 39'd524288;
parameter    ap_ST_fsm_state21 = 39'd1048576;
parameter    ap_ST_fsm_state22 = 39'd2097152;
parameter    ap_ST_fsm_state23 = 39'd4194304;
parameter    ap_ST_fsm_state24 = 39'd8388608;
parameter    ap_ST_fsm_state25 = 39'd16777216;
parameter    ap_ST_fsm_state26 = 39'd33554432;
parameter    ap_ST_fsm_state27 = 39'd67108864;
parameter    ap_ST_fsm_state28 = 39'd134217728;
parameter    ap_ST_fsm_state29 = 39'd268435456;
parameter    ap_ST_fsm_state30 = 39'd536870912;
parameter    ap_ST_fsm_state31 = 39'd1073741824;
parameter    ap_ST_fsm_state32 = 39'd2147483648;
parameter    ap_ST_fsm_state33 = 39'd4294967296;
parameter    ap_ST_fsm_state34 = 39'd8589934592;
parameter    ap_ST_fsm_state35 = 39'd17179869184;
parameter    ap_ST_fsm_state36 = 39'd34359738368;
parameter    ap_ST_fsm_state37 = 39'd68719476736;
parameter    ap_ST_fsm_state38 = 39'd137438953472;
parameter    ap_ST_fsm_state39 = 39'd274877906944;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] data_V_V_dout;
input   data_V_V_empty_n;
output   data_V_V_read;
output  [15:0] res_V_V_din;
input   res_V_V_full_n;
output   res_V_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_V_read;
reg res_V_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [38:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    data_V_V_blk_n;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln631_fu_1117_p2;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln647_fu_1156_p2;
reg    res_V_V_blk_n;
wire   [15:0] grp_fu_1040_p3;
reg   [15:0] reg_1048;
wire    ap_CS_fsm_state7;
reg    ap_block_state8;
reg    ap_block_state9;
reg    ap_block_state10;
reg    ap_block_state11;
reg    ap_block_state12;
reg    ap_block_state13;
reg    ap_block_state14;
reg    ap_block_state15;
reg    ap_block_state16;
reg    ap_block_state17;
reg    ap_block_state18;
reg    ap_block_state19;
reg    ap_block_state20;
reg    ap_block_state21;
reg    ap_block_state22;
reg    ap_block_state23;
reg    ap_block_state24;
reg    ap_block_state25;
reg    ap_block_state26;
reg    ap_block_state27;
reg    ap_block_state28;
reg    ap_block_state29;
reg    ap_block_state30;
reg    ap_block_state31;
reg    ap_block_state32;
reg    ap_block_state33;
reg    ap_block_state34;
reg    ap_block_state35;
reg    ap_block_state36;
reg    ap_block_state37;
reg    ap_block_state38;
reg    ap_block_state1;
wire   [4:0] i_fu_1073_p2;
reg   [4:0] i_reg_1815;
wire    ap_CS_fsm_state2;
wire   [5:0] j_fu_1085_p2;
reg   [5:0] j_reg_1823;
wire    ap_CS_fsm_state3;
wire   [0:0] trunc_ln203_fu_1091_p1;
reg   [0:0] trunc_ln203_reg_1828;
wire   [0:0] icmp_ln630_fu_1079_p2;
wire   [10:0] zext_ln631_fu_1113_p1;
reg   [10:0] zext_ln631_reg_1832;
wire   [5:0] k_1_fu_1123_p2;
reg    ap_block_state4;
wire   [4:0] j_1_fu_1150_p2;
reg   [4:0] j_1_reg_1848;
wire    ap_CS_fsm_state5;
wire   [5:0] k_fu_1162_p2;
reg    ap_block_state6;
wire   [9:0] tmp_1_fu_1173_p3;
reg   [9:0] tmp_1_reg_1861;
reg   [8:0] memory1_0_V_address0;
reg    memory1_0_V_ce0;
reg    memory1_0_V_we0;
wire   [15:0] memory1_0_V_q0;
reg   [8:0] memory1_1_V_address0;
reg    memory1_1_V_ce0;
reg    memory1_1_V_we0;
wire   [15:0] memory1_1_V_q0;
reg   [4:0] memory2_V_address0;
reg    memory2_V_ce0;
reg    memory2_V_we0;
wire   [15:0] memory2_V_q0;
reg   [4:0] i_0_reg_964;
wire   [0:0] icmp_ln646_fu_1144_p2;
reg   [5:0] j_0_reg_975;
wire   [0:0] icmp_ln628_fu_1067_p2;
reg   [5:0] k_0_reg_986;
reg   [4:0] j7_0_reg_997;
reg    ap_block_state39;
reg   [5:0] k8_0_reg_1009;
wire   [63:0] zext_ln203_2_fu_1138_p1;
wire   [63:0] zext_ln650_fu_1168_p1;
wire   [63:0] zext_ln203_1_fu_1181_p1;
wire   [63:0] tmp_2_fu_1192_p3;
wire   [63:0] tmp_3_fu_1207_p3;
wire   [63:0] tmp_4_fu_1222_p3;
wire   [63:0] tmp_5_fu_1237_p3;
wire   [63:0] tmp_6_fu_1252_p3;
wire   [63:0] tmp_7_fu_1267_p3;
wire   [63:0] tmp_8_fu_1282_p3;
wire   [63:0] tmp_9_fu_1297_p3;
wire   [63:0] tmp_10_fu_1312_p3;
wire   [63:0] tmp_11_fu_1327_p3;
wire   [63:0] tmp_12_fu_1342_p3;
wire   [63:0] tmp_13_fu_1357_p3;
wire   [63:0] tmp_14_fu_1372_p3;
wire   [63:0] tmp_15_fu_1387_p3;
wire   [63:0] tmp_16_fu_1402_p3;
wire   [63:0] tmp_s_fu_1417_p3;
wire   [63:0] tmp_17_fu_1432_p3;
wire   [63:0] tmp_18_fu_1447_p3;
wire   [63:0] tmp_19_fu_1462_p3;
wire   [63:0] tmp_20_fu_1477_p3;
wire   [63:0] tmp_21_fu_1492_p3;
wire   [63:0] tmp_22_fu_1507_p3;
wire   [63:0] tmp_23_fu_1522_p3;
wire   [63:0] tmp_24_fu_1537_p3;
wire   [63:0] tmp_25_fu_1552_p3;
wire   [63:0] tmp_26_fu_1567_p3;
wire   [63:0] tmp_27_fu_1582_p3;
wire   [63:0] tmp_28_fu_1597_p3;
wire   [63:0] tmp_29_fu_1612_p3;
wire   [63:0] tmp_30_fu_1627_p3;
wire   [63:0] tmp_31_fu_1642_p3;
wire   [0:0] grp_fu_1020_p2;
wire   [15:0] grp_fu_1026_p3;
wire   [0:0] grp_fu_1034_p2;
wire   [0:0] grp_fu_1052_p2;
wire   [4:0] lshr_ln_fu_1095_p4;
wire   [9:0] tmp_fu_1105_p3;
wire   [10:0] zext_ln203_fu_1129_p1;
wire   [10:0] add_ln203_fu_1133_p2;
wire   [9:0] or_ln203_fu_1187_p2;
wire   [9:0] or_ln203_1_fu_1202_p2;
wire   [9:0] or_ln203_2_fu_1217_p2;
wire   [9:0] or_ln203_3_fu_1232_p2;
wire   [9:0] or_ln203_4_fu_1247_p2;
wire   [9:0] or_ln203_5_fu_1262_p2;
wire   [9:0] or_ln203_6_fu_1277_p2;
wire   [9:0] or_ln203_7_fu_1292_p2;
wire   [9:0] or_ln203_8_fu_1307_p2;
wire   [9:0] or_ln203_9_fu_1322_p2;
wire   [9:0] or_ln203_10_fu_1337_p2;
wire   [9:0] or_ln203_11_fu_1352_p2;
wire   [9:0] or_ln203_12_fu_1367_p2;
wire   [9:0] or_ln203_13_fu_1382_p2;
wire   [9:0] or_ln203_14_fu_1397_p2;
wire   [9:0] or_ln203_15_fu_1412_p2;
wire   [9:0] or_ln203_16_fu_1427_p2;
wire   [9:0] or_ln203_17_fu_1442_p2;
wire   [9:0] or_ln203_18_fu_1457_p2;
wire   [9:0] or_ln203_19_fu_1472_p2;
wire   [9:0] or_ln203_20_fu_1487_p2;
wire   [9:0] or_ln203_21_fu_1502_p2;
wire   [9:0] or_ln203_22_fu_1517_p2;
wire   [9:0] or_ln203_23_fu_1532_p2;
wire   [9:0] or_ln203_24_fu_1547_p2;
wire   [9:0] or_ln203_25_fu_1562_p2;
wire   [9:0] or_ln203_26_fu_1577_p2;
wire   [9:0] or_ln203_27_fu_1592_p2;
wire   [9:0] or_ln203_28_fu_1607_p2;
wire   [9:0] or_ln203_29_fu_1622_p2;
wire   [9:0] or_ln203_30_fu_1637_p2;
reg   [38:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 39'd1;
end

pooling2d_cl_ss_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_melbW #(
    .DataWidth( 16 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
memory1_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(memory1_0_V_address0),
    .ce0(memory1_0_V_ce0),
    .we0(memory1_0_V_we0),
    .d0(data_V_V_dout),
    .q0(memory1_0_V_q0)
);

pooling2d_cl_ss_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_melbW #(
    .DataWidth( 16 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
memory1_1_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(memory1_1_V_address0),
    .ce0(memory1_1_V_ce0),
    .we0(memory1_1_V_we0),
    .d0(data_V_V_dout),
    .q0(memory1_1_V_q0)
);

conv_2d_cl_ss_ap_fixed_ap_fixed_16_4_5_3_0_config5_s_tmpdjbC #(
    .DataWidth( 16 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
memory2_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(memory2_V_address0),
    .ce0(memory2_V_ce0),
    .we0(memory2_V_we0),
    .d0(data_V_V_dout),
    .q0(memory2_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln628_fu_1067_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln646_fu_1144_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i_0_reg_964 <= i_reg_1815;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_964 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln630_fu_1079_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        j7_0_reg_997 <= 5'd0;
    end else if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state39))) begin
        j7_0_reg_997 <= j_1_reg_1848;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln628_fu_1067_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_975 <= 6'd0;
    end else if ((~((icmp_ln631_fu_1117_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln631_fu_1117_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        j_0_reg_975 <= j_reg_1823;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln646_fu_1144_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        k8_0_reg_1009 <= 6'd0;
    end else if ((~((icmp_ln647_fu_1156_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln647_fu_1156_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        k8_0_reg_1009 <= k_fu_1162_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln630_fu_1079_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        k_0_reg_986 <= 6'd0;
    end else if ((~((icmp_ln631_fu_1117_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln631_fu_1117_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        k_0_reg_986 <= k_1_fu_1123_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_1815 <= i_fu_1073_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j_1_reg_1848 <= j_1_fu_1150_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_1823 <= j_fu_1085_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state38)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state37)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state36)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state35)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state34)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state33)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state32)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state31)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state30)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state29)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state28)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state27)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state26)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state25)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state24)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state23)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state22)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state21)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state20)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state19)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state18)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state17)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state15)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state14)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state13)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state12)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state11)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state10)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state9)))) begin
        reg_1048 <= grp_fu_1040_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln647_fu_1156_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln647_fu_1156_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_1_reg_1861[9 : 5] <= tmp_1_fu_1173_p3[9 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln630_fu_1079_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        trunc_ln203_reg_1828 <= trunc_ln203_fu_1091_p1;
        zext_ln631_reg_1832[9 : 5] <= zext_ln631_fu_1113_p1[9 : 5];
    end
end

always @ (*) begin
    if (((icmp_ln628_fu_1067_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | ((icmp_ln631_fu_1117_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | ((icmp_ln647_fu_1156_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6)))) begin
        data_V_V_blk_n = data_V_V_empty_n;
    end else begin
        data_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8)) | (~((icmp_ln631_fu_1117_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln631_fu_1117_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | (~((icmp_ln647_fu_1156_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln647_fu_1156_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state39)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state38)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state37)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state36)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state35)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state34)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state33)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state32)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state31)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state30)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state29)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state28)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state27)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state26)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state25)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state24)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state23)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state22)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state21)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state20)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state19)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state18)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state17)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state15)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state14)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state13)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state12)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state11)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state10)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state9)))) begin
        data_V_V_read = 1'b1;
    end else begin
        data_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln628_fu_1067_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        memory1_0_V_address0 = tmp_31_fu_1642_p3;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        memory1_0_V_address0 = tmp_30_fu_1627_p3;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        memory1_0_V_address0 = tmp_29_fu_1612_p3;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        memory1_0_V_address0 = tmp_28_fu_1597_p3;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        memory1_0_V_address0 = tmp_27_fu_1582_p3;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        memory1_0_V_address0 = tmp_26_fu_1567_p3;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        memory1_0_V_address0 = tmp_25_fu_1552_p3;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        memory1_0_V_address0 = tmp_24_fu_1537_p3;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        memory1_0_V_address0 = tmp_23_fu_1522_p3;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        memory1_0_V_address0 = tmp_22_fu_1507_p3;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        memory1_0_V_address0 = tmp_21_fu_1492_p3;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        memory1_0_V_address0 = tmp_20_fu_1477_p3;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        memory1_0_V_address0 = tmp_19_fu_1462_p3;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        memory1_0_V_address0 = tmp_18_fu_1447_p3;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        memory1_0_V_address0 = tmp_17_fu_1432_p3;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        memory1_0_V_address0 = tmp_s_fu_1417_p3;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        memory1_0_V_address0 = tmp_16_fu_1402_p3;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        memory1_0_V_address0 = tmp_15_fu_1387_p3;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        memory1_0_V_address0 = tmp_14_fu_1372_p3;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        memory1_0_V_address0 = tmp_13_fu_1357_p3;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        memory1_0_V_address0 = tmp_12_fu_1342_p3;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        memory1_0_V_address0 = tmp_11_fu_1327_p3;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        memory1_0_V_address0 = tmp_10_fu_1312_p3;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        memory1_0_V_address0 = tmp_9_fu_1297_p3;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        memory1_0_V_address0 = tmp_8_fu_1282_p3;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        memory1_0_V_address0 = tmp_7_fu_1267_p3;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        memory1_0_V_address0 = tmp_6_fu_1252_p3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        memory1_0_V_address0 = tmp_5_fu_1237_p3;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        memory1_0_V_address0 = tmp_4_fu_1222_p3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        memory1_0_V_address0 = tmp_3_fu_1207_p3;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        memory1_0_V_address0 = tmp_2_fu_1192_p3;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        memory1_0_V_address0 = zext_ln203_1_fu_1181_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        memory1_0_V_address0 = zext_ln203_2_fu_1138_p1;
    end else begin
        memory1_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8)) | (~((icmp_ln631_fu_1117_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)) | (~((icmp_ln647_fu_1156_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state37)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state36)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state35)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state34)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state33)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state32)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state31)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state30)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state29)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state28)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state27)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state26)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state25)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state24)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state23)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state22)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state21)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state20)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state19)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state18)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state17)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state15)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state14)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state13)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state12)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state11)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state10)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state9)))) begin
        memory1_0_V_ce0 = 1'b1;
    end else begin
        memory1_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln631_fu_1117_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (trunc_ln203_reg_1828 == 1'd0) & (icmp_ln631_fu_1117_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        memory1_0_V_we0 = 1'b1;
    end else begin
        memory1_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        memory1_1_V_address0 = tmp_31_fu_1642_p3;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        memory1_1_V_address0 = tmp_30_fu_1627_p3;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        memory1_1_V_address0 = tmp_29_fu_1612_p3;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        memory1_1_V_address0 = tmp_28_fu_1597_p3;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        memory1_1_V_address0 = tmp_27_fu_1582_p3;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        memory1_1_V_address0 = tmp_26_fu_1567_p3;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        memory1_1_V_address0 = tmp_25_fu_1552_p3;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        memory1_1_V_address0 = tmp_24_fu_1537_p3;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        memory1_1_V_address0 = tmp_23_fu_1522_p3;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        memory1_1_V_address0 = tmp_22_fu_1507_p3;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        memory1_1_V_address0 = tmp_21_fu_1492_p3;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        memory1_1_V_address0 = tmp_20_fu_1477_p3;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        memory1_1_V_address0 = tmp_19_fu_1462_p3;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        memory1_1_V_address0 = tmp_18_fu_1447_p3;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        memory1_1_V_address0 = tmp_17_fu_1432_p3;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        memory1_1_V_address0 = tmp_s_fu_1417_p3;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        memory1_1_V_address0 = tmp_16_fu_1402_p3;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        memory1_1_V_address0 = tmp_15_fu_1387_p3;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        memory1_1_V_address0 = tmp_14_fu_1372_p3;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        memory1_1_V_address0 = tmp_13_fu_1357_p3;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        memory1_1_V_address0 = tmp_12_fu_1342_p3;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        memory1_1_V_address0 = tmp_11_fu_1327_p3;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        memory1_1_V_address0 = tmp_10_fu_1312_p3;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        memory1_1_V_address0 = tmp_9_fu_1297_p3;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        memory1_1_V_address0 = tmp_8_fu_1282_p3;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        memory1_1_V_address0 = tmp_7_fu_1267_p3;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        memory1_1_V_address0 = tmp_6_fu_1252_p3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        memory1_1_V_address0 = tmp_5_fu_1237_p3;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        memory1_1_V_address0 = tmp_4_fu_1222_p3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        memory1_1_V_address0 = tmp_3_fu_1207_p3;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        memory1_1_V_address0 = tmp_2_fu_1192_p3;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        memory1_1_V_address0 = zext_ln203_1_fu_1181_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        memory1_1_V_address0 = zext_ln203_2_fu_1138_p1;
    end else begin
        memory1_1_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8)) | (~((icmp_ln631_fu_1117_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)) | (~((icmp_ln647_fu_1156_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state37)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state36)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state35)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state34)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state33)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state32)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state31)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state30)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state29)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state28)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state27)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state26)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state25)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state24)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state23)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state22)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state21)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state20)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state19)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state18)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state17)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state15)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state14)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state13)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state12)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state11)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state10)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state9)))) begin
        memory1_1_V_ce0 = 1'b1;
    end else begin
        memory1_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln631_fu_1117_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln631_fu_1117_p2 == 1'd0) & (trunc_ln203_reg_1828 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        memory1_1_V_we0 = 1'b1;
    end else begin
        memory1_1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        memory2_V_address0 = 64'd31;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        memory2_V_address0 = 64'd30;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        memory2_V_address0 = 64'd29;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        memory2_V_address0 = 64'd28;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        memory2_V_address0 = 64'd27;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        memory2_V_address0 = 64'd26;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        memory2_V_address0 = 64'd25;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        memory2_V_address0 = 64'd24;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        memory2_V_address0 = 64'd23;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        memory2_V_address0 = 64'd22;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        memory2_V_address0 = 64'd21;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        memory2_V_address0 = 64'd20;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        memory2_V_address0 = 64'd19;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        memory2_V_address0 = 64'd18;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        memory2_V_address0 = 64'd17;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        memory2_V_address0 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        memory2_V_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        memory2_V_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        memory2_V_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        memory2_V_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        memory2_V_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        memory2_V_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        memory2_V_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        memory2_V_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        memory2_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        memory2_V_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        memory2_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        memory2_V_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        memory2_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        memory2_V_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        memory2_V_address0 = 64'd1;
    end else if (((icmp_ln647_fu_1156_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        memory2_V_address0 = 64'd0;
    end else if (((icmp_ln647_fu_1156_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        memory2_V_address0 = zext_ln650_fu_1168_p1;
    end else begin
        memory2_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8)) | (~((icmp_ln647_fu_1156_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln647_fu_1156_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6)) | (~((icmp_ln647_fu_1156_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln647_fu_1156_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state37)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state36)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state35)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state34)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state33)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state32)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state31)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state30)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state29)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state28)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state27)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state26)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state25)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state24)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state23)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state22)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state21)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state20)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state19)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state18)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state17)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state15)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state14)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state13)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state12)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state11)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state10)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state9)))) begin
        memory2_V_ce0 = 1'b1;
    end else begin
        memory2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln647_fu_1156_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln647_fu_1156_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        memory2_V_we0 = 1'b1;
    end else begin
        memory2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        res_V_V_blk_n = res_V_V_full_n;
    end else begin
        res_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state39)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state38)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state37)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state36)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state35)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state34)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state33)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state32)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state31)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state30)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state29)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state28)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state27)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state26)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state25)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state24)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state23)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state22)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state21)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state20)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state19)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state18)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state17)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state15)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state14)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state13)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state12)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state11)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state10)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state9)))) begin
        res_V_V_write = 1'b1;
    end else begin
        res_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln628_fu_1067_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln630_fu_1079_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((icmp_ln631_fu_1117_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln631_fu_1117_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if ((~((icmp_ln631_fu_1117_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln631_fu_1117_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln646_fu_1144_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if ((~((icmp_ln647_fu_1156_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln647_fu_1156_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else if ((~((icmp_ln647_fu_1156_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln647_fu_1156_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state31))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state36))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state37 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state38 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state38))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state39 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state39))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln203_fu_1133_p2 = (zext_ln631_reg_1832 + zext_ln203_fu_1129_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

always @ (*) begin
    ap_block_state10 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state11 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state12 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state13 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state14 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state15 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state16 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state17 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state18 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state19 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state20 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state21 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state22 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state23 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state24 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state25 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state26 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state27 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state28 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state29 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state30 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state31 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state32 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state33 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state34 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state35 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state36 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state37 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state38 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state39 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4 = ((icmp_ln631_fu_1117_p2 == 1'd0) & (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state6 = ((icmp_ln647_fu_1156_p2 == 1'd0) & (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state8 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state9 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign grp_fu_1020_p2 = (($signed(memory1_1_V_q0) > $signed(memory1_0_V_q0)) ? 1'b1 : 1'b0);

assign grp_fu_1026_p3 = ((grp_fu_1020_p2[0:0] === 1'b1) ? memory1_1_V_q0 : memory1_0_V_q0);

assign grp_fu_1034_p2 = (($signed(memory2_V_q0) > $signed(grp_fu_1026_p3)) ? 1'b1 : 1'b0);

assign grp_fu_1040_p3 = ((grp_fu_1034_p2[0:0] === 1'b1) ? memory2_V_q0 : grp_fu_1026_p3);

assign grp_fu_1052_p2 = (($signed(data_V_V_dout) > $signed(reg_1048)) ? 1'b1 : 1'b0);

assign i_fu_1073_p2 = (i_0_reg_964 + 5'd1);

assign icmp_ln628_fu_1067_p2 = ((i_0_reg_964 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln630_fu_1079_p2 = ((j_0_reg_975 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln631_fu_1117_p2 = ((k_0_reg_986 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln646_fu_1144_p2 = ((j7_0_reg_997 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln647_fu_1156_p2 = ((k8_0_reg_1009 == 6'd32) ? 1'b1 : 1'b0);

assign j_1_fu_1150_p2 = (j7_0_reg_997 + 5'd1);

assign j_fu_1085_p2 = (j_0_reg_975 + 6'd1);

assign k_1_fu_1123_p2 = (k_0_reg_986 + 6'd1);

assign k_fu_1162_p2 = (k8_0_reg_1009 + 6'd1);

assign lshr_ln_fu_1095_p4 = {{j_0_reg_975[5:1]}};

assign or_ln203_10_fu_1337_p2 = (tmp_1_reg_1861 | 10'd11);

assign or_ln203_11_fu_1352_p2 = (tmp_1_reg_1861 | 10'd12);

assign or_ln203_12_fu_1367_p2 = (tmp_1_reg_1861 | 10'd13);

assign or_ln203_13_fu_1382_p2 = (tmp_1_reg_1861 | 10'd14);

assign or_ln203_14_fu_1397_p2 = (tmp_1_reg_1861 | 10'd15);

assign or_ln203_15_fu_1412_p2 = (tmp_1_reg_1861 | 10'd16);

assign or_ln203_16_fu_1427_p2 = (tmp_1_reg_1861 | 10'd17);

assign or_ln203_17_fu_1442_p2 = (tmp_1_reg_1861 | 10'd18);

assign or_ln203_18_fu_1457_p2 = (tmp_1_reg_1861 | 10'd19);

assign or_ln203_19_fu_1472_p2 = (tmp_1_reg_1861 | 10'd20);

assign or_ln203_1_fu_1202_p2 = (tmp_1_reg_1861 | 10'd2);

assign or_ln203_20_fu_1487_p2 = (tmp_1_reg_1861 | 10'd21);

assign or_ln203_21_fu_1502_p2 = (tmp_1_reg_1861 | 10'd22);

assign or_ln203_22_fu_1517_p2 = (tmp_1_reg_1861 | 10'd23);

assign or_ln203_23_fu_1532_p2 = (tmp_1_reg_1861 | 10'd24);

assign or_ln203_24_fu_1547_p2 = (tmp_1_reg_1861 | 10'd25);

assign or_ln203_25_fu_1562_p2 = (tmp_1_reg_1861 | 10'd26);

assign or_ln203_26_fu_1577_p2 = (tmp_1_reg_1861 | 10'd27);

assign or_ln203_27_fu_1592_p2 = (tmp_1_reg_1861 | 10'd28);

assign or_ln203_28_fu_1607_p2 = (tmp_1_reg_1861 | 10'd29);

assign or_ln203_29_fu_1622_p2 = (tmp_1_reg_1861 | 10'd30);

assign or_ln203_2_fu_1217_p2 = (tmp_1_reg_1861 | 10'd3);

assign or_ln203_30_fu_1637_p2 = (tmp_1_reg_1861 | 10'd31);

assign or_ln203_3_fu_1232_p2 = (tmp_1_reg_1861 | 10'd4);

assign or_ln203_4_fu_1247_p2 = (tmp_1_reg_1861 | 10'd5);

assign or_ln203_5_fu_1262_p2 = (tmp_1_reg_1861 | 10'd6);

assign or_ln203_6_fu_1277_p2 = (tmp_1_reg_1861 | 10'd7);

assign or_ln203_7_fu_1292_p2 = (tmp_1_reg_1861 | 10'd8);

assign or_ln203_8_fu_1307_p2 = (tmp_1_reg_1861 | 10'd9);

assign or_ln203_9_fu_1322_p2 = (tmp_1_reg_1861 | 10'd10);

assign or_ln203_fu_1187_p2 = (tmp_1_reg_1861 | 10'd1);

assign res_V_V_din = ((grp_fu_1052_p2[0:0] === 1'b1) ? data_V_V_dout : reg_1048);

assign start_out = real_start;

assign tmp_10_fu_1312_p3 = {{54'd0}, {or_ln203_8_fu_1307_p2}};

assign tmp_11_fu_1327_p3 = {{54'd0}, {or_ln203_9_fu_1322_p2}};

assign tmp_12_fu_1342_p3 = {{54'd0}, {or_ln203_10_fu_1337_p2}};

assign tmp_13_fu_1357_p3 = {{54'd0}, {or_ln203_11_fu_1352_p2}};

assign tmp_14_fu_1372_p3 = {{54'd0}, {or_ln203_12_fu_1367_p2}};

assign tmp_15_fu_1387_p3 = {{54'd0}, {or_ln203_13_fu_1382_p2}};

assign tmp_16_fu_1402_p3 = {{54'd0}, {or_ln203_14_fu_1397_p2}};

assign tmp_17_fu_1432_p3 = {{54'd0}, {or_ln203_16_fu_1427_p2}};

assign tmp_18_fu_1447_p3 = {{54'd0}, {or_ln203_17_fu_1442_p2}};

assign tmp_19_fu_1462_p3 = {{54'd0}, {or_ln203_18_fu_1457_p2}};

assign tmp_1_fu_1173_p3 = {{j7_0_reg_997}, {5'd0}};

assign tmp_20_fu_1477_p3 = {{54'd0}, {or_ln203_19_fu_1472_p2}};

assign tmp_21_fu_1492_p3 = {{54'd0}, {or_ln203_20_fu_1487_p2}};

assign tmp_22_fu_1507_p3 = {{54'd0}, {or_ln203_21_fu_1502_p2}};

assign tmp_23_fu_1522_p3 = {{54'd0}, {or_ln203_22_fu_1517_p2}};

assign tmp_24_fu_1537_p3 = {{54'd0}, {or_ln203_23_fu_1532_p2}};

assign tmp_25_fu_1552_p3 = {{54'd0}, {or_ln203_24_fu_1547_p2}};

assign tmp_26_fu_1567_p3 = {{54'd0}, {or_ln203_25_fu_1562_p2}};

assign tmp_27_fu_1582_p3 = {{54'd0}, {or_ln203_26_fu_1577_p2}};

assign tmp_28_fu_1597_p3 = {{54'd0}, {or_ln203_27_fu_1592_p2}};

assign tmp_29_fu_1612_p3 = {{54'd0}, {or_ln203_28_fu_1607_p2}};

assign tmp_2_fu_1192_p3 = {{54'd0}, {or_ln203_fu_1187_p2}};

assign tmp_30_fu_1627_p3 = {{54'd0}, {or_ln203_29_fu_1622_p2}};

assign tmp_31_fu_1642_p3 = {{54'd0}, {or_ln203_30_fu_1637_p2}};

assign tmp_3_fu_1207_p3 = {{54'd0}, {or_ln203_1_fu_1202_p2}};

assign tmp_4_fu_1222_p3 = {{54'd0}, {or_ln203_2_fu_1217_p2}};

assign tmp_5_fu_1237_p3 = {{54'd0}, {or_ln203_3_fu_1232_p2}};

assign tmp_6_fu_1252_p3 = {{54'd0}, {or_ln203_4_fu_1247_p2}};

assign tmp_7_fu_1267_p3 = {{54'd0}, {or_ln203_5_fu_1262_p2}};

assign tmp_8_fu_1282_p3 = {{54'd0}, {or_ln203_6_fu_1277_p2}};

assign tmp_9_fu_1297_p3 = {{54'd0}, {or_ln203_7_fu_1292_p2}};

assign tmp_fu_1105_p3 = {{lshr_ln_fu_1095_p4}, {5'd0}};

assign tmp_s_fu_1417_p3 = {{54'd0}, {or_ln203_15_fu_1412_p2}};

assign trunc_ln203_fu_1091_p1 = j_0_reg_975[0:0];

assign zext_ln203_1_fu_1181_p1 = tmp_1_fu_1173_p3;

assign zext_ln203_2_fu_1138_p1 = add_ln203_fu_1133_p2;

assign zext_ln203_fu_1129_p1 = k_0_reg_986;

assign zext_ln631_fu_1113_p1 = tmp_fu_1105_p3;

assign zext_ln650_fu_1168_p1 = k8_0_reg_1009;

always @ (posedge ap_clk) begin
    zext_ln631_reg_1832[4:0] <= 5'b00000;
    zext_ln631_reg_1832[10] <= 1'b0;
    tmp_1_reg_1861[4:0] <= 5'b00000;
end

endmodule //pooling2d_cl_ss_ap_fixed_ap_fixed_16_4_5_3_0_config8_s
